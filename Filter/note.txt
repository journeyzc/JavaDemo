1.Filter:

1).Filter 是什么?
①.JavaWEB 的一个重要组件,可以对发送到Servlet 的请求进行拦截,并对响应也进行拦截
②.Filter 是实现Filter 接口的Java类
③.Filter 需要在web.xml 文件中进行配置和映射


2).如何创建一个Filter,并把他跑起来
①. 创建一个Filter 类:实现Filter 接口 如 public class HelloFilter implements Filter
②. 在web.xml 文件中配置并映射该Filter。其中url-pattern 指定该Filter可以拦截那些资源,既可以通过哪些url访问到该Filter
<!-- 注册 Filter -->
  	<filter>
  	    <filter-name>helloFilter</filter-name>
  	    <filter-class>com.journey.javaweb.HelloFilter</filter-class>
  	</filter>
  	<!-- 映射 Filter -->
  	<filter-mapping>
  	    <filter-name>helloFilter</filter-name>
  	    <url-pattern>/test.jsp</url-pattern>
  	</filter-mapping>

3).Filter 相关的API:
①. Filter 接口:

	> public void init(FilterConfig filterConfig) 类似于 Servlet的init方法，在创建Filter对象后，立即被调用
	，且只被调用一次。该方法用于对当前的Filter 进行初始化操作。Filter 实例是单例的
	
		* FilterConfig类似于servletConfig
		
		*可以在web.xml中配置当前Filter的初始化参数，配置方式也和Servlet类似。
		<filter>
	  	    <filter-name>helloFilter</filter-name>
	  	    <filter-class>com.journey.javaweb.HelloFilter</filter-class>
	  	    <init-param>
	  	        <param-name>name</param-name>
	  	        <param-value>root</param-value>
	  	    </init-param>
  		</filter>
	
	> public void doFilter(ServletRequest request , ServletResponse response , FilterChain chain):真正Filter 的逻辑代码需要编写在该方法中。
	每次拦截都会调用该方法
	
		*FilterChain: Filter 链。 多个 Filter 可以构成一个Filter 链。
		
			-doFilter(ServletRequest request, ServletResponse response) :把请求传给 Filter 链的下一个Filter 若
			当前Filter 是 Filter 链的最后一个Filter，将把请求给到目标Servlet（或JSP）
			
			-多个Filter 拦截的顺序和<Filter-mapping>配置的顺序有关，靠前的先被调用。
	>public void destroy():释放当前Filter 所占用的资源的方法，在Filter 被销毁之前调用，且只被调用一次

4). <dispatcher> 元素：指定过滤器所拦截的资源被Servlet 容器调用的方式
可以是REQUEST , INCLUDE , FORWARD和 ERROR之一, 默认REQUEST .可以设置多个<dispatcher>子元素用来指定Filter 对资源的多种调用方式进行拦截
	
	①.REQUEST : 当用户直接访问页面时，web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时,那么该过滤器
	就不会被调用.
	
	
	通过GET 或 POST 请求直接访问
	
	
	②.INCLUDE : 如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。
	<jsp:include page="/test.jsp"></jsp:include>
	
	③.FORWARD : 如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。

	<jsp:forward page="/test.jsp"></jsp:forward>
	或通过page 指令的 errorPage
	<error-page>
  	    <exception-type>java.lang.ArithmeticException</exception-type>
  	    <location>/test.jsp</location>
  	</error-page>
	
	④.ERROR : 如果目标资源是通过声明式异常处理机制调用时，那么过滤器将被调用。除此之外，过滤器不会被调用。



<filter-mapping>
	<filter-name>secondFilter</filter-name>
	<url-pattern>/test.jsp</url-pattern>
	<dispatcher>REQUEST</dispatcher>
	<dispatcher>FORWARD</dispatcher>
	<dispatcher>INCLUDE</dispatcher>
	<dispatcher>ERROR</dispatcher>
</filter-mapping>